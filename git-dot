#!/usr/bin/python

import click
import subprocess

from graphviz import Digraph


def git(*args):
    return subprocess.check_output(
        ('git',) + args
    ).decode()


def parents_of(commit):
    return git('rev-list', '--parents', '-n1', commit).split()[1:]


def subject_of(commit):
    return git('show', '--quiet', '--format=%s', commit).splitlines()[0]


def make_message_from(*commits):
    messages = []
    for commit in commits:
        parents = parents_of(commit)
        if len(parents) > 1:
            message = make_message_from(*parents)
        else:
            message = subject_of(commit)

        messages.append(message)

    return '+'.join(messages)


@click.command()
@click.option('-o', '--output')
@click.option('-r', '--render', is_flag=True,
              help='generate image')
@click.option('-v', '--view', is_flag=True,
              help='generate and view image')
@click.option('-f', '--format', default='svg',
              help='format of rendered output')
@click.option('-m', '--use-message', is_flag=True,
              help='use commit message for node label')
@click.option('-M', '--fake-merge-message', is_flag=True,
              help='synthesize a label for merge commits from parent names')
@click.option('-g', '--gather', type=click.Choice(['free', 'commit', 'branch']),
              default='free',
              help='attempt to group commits by given criteria')
@click.option('--shortref-len', default=10,
              help='length of displayed commit ids')
@click.option('--exclude-remote', '--xr', multiple=True, default=[])
@click.option('--exclude-tag', '--xt', multiple=True, default=[])
@click.option('--exclude-branch', '--xb', multiple=True, default=[])
@click.option('--remote/--no-remote', '-R', 'flag_remote',
              help='include remote heads in graph')
@click.option('--tags/--no-tags', '-t', 'flag_tags',
              help='include tags in graph')
@click.option('--rankdir', default='TB')
@click.option('--shape', default='circle',
              help='set node shape')
def main(output, render, view, format, flag_remote, flag_tags,
         rankdir, use_message, gather, shortref_len,
         exclude_remote, exclude_tag, exclude_branch,
         shape, fake_merge_message):

    def _shortref(ref):
        return ref[:shortref_len]

    if (render or view) and not output:
        raise click.ClickException('--render and --view require --output')

    seen = set()

    graph = Digraph(name='git', format='svg',
                    graph_attr=dict(rankdir=rankdir),
                    node_attr=dict(shape=shape),
                    )

    # subgraph for local branch heads
    heads = Digraph(node_attr=dict(
        group='heads', shape='box', color='black', style='filled', fontcolor='white',
    ))

    # one subgraph per branch when using -g, otherwise just a funny
    # container for a single subgraph.
    commits = []

    branch_links = set()
    commit_links = set()
    tag_links = set()

    for info in git('for-each-ref',
                    '--format=%(objectname) %(refname:short)',
                    'refs/heads/').splitlines():
        headid, head = info.split()
        if head in exclude_branch:
            continue

        heads.node(head)
        branch_links.add((head, _shortref(headid)))

        if gather == 'branch':
            sub = Digraph(node_attr=dict(group=f'{head}_commits'))
            commits.append(sub)
        elif not commits and gather == 'commit':
            sub = Digraph(node_attr=dict(group='commits'))
            commits.append(sub)
        elif not commits and gather == 'free':
            sub = graph
            commits.append(sub)
        else:
            sub = commits[0]

        for commit in git('rev-list', head).splitlines():
            if commit in seen:
                continue
            seen.add(commit)

            message = subject_of(commit)
            commit_parents = parents_of(commit)
            for parent in commit_parents:
                commit_links.add((_shortref(commit), _shortref(parent)))

            if use_message:
                if fake_merge_message and len(commit_parents) > 1:
                    message = make_message_from(*commit_parents)
                args = dict(tooltip=commit, label=message)
            else:
                args = dict(tooltip=message)

            sub.node(_shortref(commit), **args)

    if gather != 'free':
        for sub in commits:
            graph.subgraph(sub)

    graph.subgraph(heads)

    if flag_remote:
        # subgraph for remote heads
        remote_heads = Digraph(node_attr=dict(
            group='remote_heads', shape='box', color='grey', style='filled',
            fontcolor='white',
        ))

        for remote in git('remote').splitlines():
            if remote in exclude_remote:
                continue

            for info in git('for-each-ref',
                            '--format=%(objectname) %(refname:short)',
                            f'refs/remotes/{remote}/').splitlines():
                refid, ref = info.split()
                if refid not in seen:
                    continue
                remote_heads.node(ref)
                branch_links.add((ref, _shortref(refid)))
        graph.subgraph(remote_heads)

    if flag_tags:
        # subgraph for tags
        tags = Digraph(node_attr=dict(
            group='tags', shape='cds', color='#87f542', style='filled',
            fontcolor='black',
        ))

        for info in git('for-each-ref',
                        '--format=%(objectname) %(refname:short)',
                        'refs/tags/').splitlines():
            tagid, tag = info.split()
            if tag in exclude_tag:
                continue

            tags.node(tag)
            tag_links.add((tag, _shortref(tagid)))
        graph.subgraph(tags)

    if branch_links:
        with graph.subgraph(edge_attr=dict(style='dashed')) as sub:
            sub.edges(branch_links)

    if tag_links:
        with graph.subgraph(edge_attr=dict(style='dashed')) as sub:
            sub.edges(tag_links)

    graph.edges(commit_links)

    if not output:
        print(graph.source)
    else:
        if format == 'dot':
            with open(output, 'w') as fd:
                fd.write(graph.source)
        else:
            graph.render(filename=output, view=view, format=format)


if __name__ == '__main__':
    main()
