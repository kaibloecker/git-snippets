#!/bin/bash

get_remote_branch () {
	local branch
	branch=($(git show --quiet --format=%b $1 | awk '/^x-branch: / {print $2}'))

	if (( "${#branch[*]}" == 0 )); then
		echo "ERROR: no x-branch directive" >&2
		return 1
	elif (( "${#branch[*]}" > 1 )); then
		echo "ERROR: multiple x-branch directives" >&2
		return 1
	fi

	echo "${branch[0]}"
}

branch_exists() {
	git rev-parse -q --verify "$1" > /dev/null
}

opt_discover=0
opt_branch=0
opt_update=0
opt_cleanup=0
to_rev=HEAD
while getopts dbukt: ch; do
	case $ch in
	(t)	to_rev=$OPTARG
		;;
	(d)	opt_discover=1
		;;
	(b)	opt_branch=1
		;;
	(u)	opt_update=1
		;;
	(k)	opt_cleanup=1
		;;
	esac
done
shift $(( OPTIND - 1 ))

if (( $# < 1 )); then
	echo "ERROR: $0: usage: $0 <base> [<remote>]" >&2
	exit 2
fi

base=$1
remote=${2:-origin}
target=$(git remote get-url $remote | awk -F/ '{printf "%s/%s", $(NF-1), $NF}')

old_head=$(git rev-parse --abbrev-ref HEAD)

revs=($(git log --reverse --grep '^x-branch:' --format=%H ${base}..${to_rev}))
branches=()
for rev in "${revs[@]}"; do
	remote_branch=$(get_remote_branch $rev) || exit 1
	branches+=($remote_branch)
	echo "FOUND ${rev:0:7} [$(git show --quiet --format=%s $rev)] -> $remote_branch"
done

(( opt_discover == 1 )) && exit

trap "git checkout -q $old_head" EXIT
set -e

for (( i=0; i<${#revs[*]}; i++ )); do
	rev=${revs[i]}
	remote_branch=${branches[i]}

	if branch_exists $remote_branch; then
		echo "BRANCH $remote_branch@${rev:0:7} -- exists"
		git checkout -q $remote_branch
		git reset -q --hard $rev
	else
		echo "BRANCH $remote_branch@${rev:0:7} -- create"
		git branch -q -D $remote_branch > /dev/null 2>&1 ||:
		git checkout -q -b $remote_branch $rev
	fi

	(( $opt_branch == 1 )) && continue

	echo "PUSH ${rev:0:7} -> $remote_branch"
	git push -u -f origin $remote_branch

	(( $opt_update == 1 )) && continue

	if gh pr view > /dev/null 2>&1; then
		echo "PR $remote_branch@${rev:0:7} -- exists"
	else
		echo "PR $remote_branch@${rev:0:7} -- creating"
		gh pr create \
			-t "$(git show --quiet --format=%s)" \
			-b "$(git show --quiet --format=%b | grep -v '^x-branch:')"
	fi

	if (( $opt_cleanup == 1 )); then
		echo "DELETE $remote_branch"
		git checkout -q --detach
		git branch -D $remote_branch > /dev/null 2>&1
	fi

	prev_branch=$remote_branch
done
